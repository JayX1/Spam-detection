{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPMItv1+OpNALZxYNfo+/aO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JayX1/Spam-detection/blob/main/spam\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "CikH0f8rWrC9"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem.porter import PorterStemmer\n",
        "import string\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import scipy.sparse as sp\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report, confusion_matrix"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ceas_dataset=pd.read_csv('CEAS_08.csv')\n",
        "enron_dataset=pd.read_csv('enron_data_fraud_labeled.csv')"
      ],
      "metadata": {
        "id": "pRxM7aQgVeEp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d790ce80-e4bd-46d1-d254-77a546aee40b"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-383276074.py:2: DtypeWarning: Columns (7,13) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  enron_dataset=pd.read_csv('enron_data_fraud_labeled.csv')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ceas_dataset.info()\n",
        "ceas_dataset.isna().sum()\n",
        "ceas_dataset.head()\n",
        "ceas_dataset= ceas_dataset.drop(columns=['date','receiver','urls'],axis=1)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Aydi2WyJXqcl",
        "outputId": "dc1d4d4b-757c-43c5-bd62-db4216fb15c6"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 39154 entries, 0 to 39153\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   sender    39154 non-null  object\n",
            " 1   receiver  38692 non-null  object\n",
            " 2   date      39154 non-null  object\n",
            " 3   subject   39126 non-null  object\n",
            " 4   body      39154 non-null  object\n",
            " 5   label     39154 non-null  int64 \n",
            " 6   urls      39154 non-null  int64 \n",
            "dtypes: int64(2), object(5)\n",
            "memory usage: 2.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "enron_dataset.info()\n",
        "enron_dataset.isna().sum().isna().sum()\n",
        "enron_dataset= enron_dataset[['From','Subject','Body','Label']]\n",
        "enron_dataset=enron_dataset.rename(columns={'From':'sender','Subject':'subject','Body':'body','Label':'label'})\n",
        "enron_dataset.head()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 883
        },
        "id": "SjHrkamRW97t",
        "outputId": "70e532dd-2d0d-4fd2-c303-f350ee23ae92"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 447417 entries, 0 to 447416\n",
            "Data columns (total 32 columns):\n",
            " #   Column                     Non-Null Count   Dtype  \n",
            "---  ------                     --------------   -----  \n",
            " 0   Folder-User                447417 non-null  object \n",
            " 1   Folder-Name                447417 non-null  object \n",
            " 2   Message-ID                 447417 non-null  object \n",
            " 3   Date                       447417 non-null  object \n",
            " 4   From                       447417 non-null  object \n",
            " 5   To                         447417 non-null  object \n",
            " 6   Subject                    429397 non-null  object \n",
            " 7   Mime-Version               447417 non-null  object \n",
            " 8   Content-Type               447417 non-null  object \n",
            " 9   Content-Transfer-Encoding  447417 non-null  object \n",
            " 10  X-From                     447417 non-null  object \n",
            " 11  X-To                       439238 non-null  object \n",
            " 12  X-cc                       109637 non-null  object \n",
            " 13  X-bcc                      177 non-null     object \n",
            " 14  X-Folder                   447417 non-null  object \n",
            " 15  X-Origin                   447417 non-null  object \n",
            " 16  X-FileName                 444727 non-null  object \n",
            " 17  Body                       447417 non-null  object \n",
            " 18  Cc                         447417 non-null  object \n",
            " 19  Bcc                        447417 non-null  object \n",
            " 20  Time                       447417 non-null  object \n",
            " 21  Attendees                  447417 non-null  object \n",
            " 22  Re                         447417 non-null  object \n",
            " 23  Source                     447417 non-null  object \n",
            " 24  Mail-ID                    447417 non-null  object \n",
            " 25  POI-Present                447417 non-null  bool   \n",
            " 26  Suspicious-Folders         447417 non-null  bool   \n",
            " 27  Sender-Type                447417 non-null  object \n",
            " 28  Unique-Mails-From-Sender   447417 non-null  float64\n",
            " 29  Low-Comm                   447417 non-null  bool   \n",
            " 30  Contains-Reply-Forwards    447417 non-null  bool   \n",
            " 31  Label                      447417 non-null  int64  \n",
            "dtypes: bool(4), float64(1), int64(1), object(26)\n",
            "memory usage: 97.3+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    sender                                            subject  \\\n",
              "0          msagel@home.com                                             Status   \n",
              "1  slafontaine@globalp.com                                 re:summer inverses   \n",
              "2  iceoperations@intcx.com                      The WTI Bullet swap contracts   \n",
              "3       klarnold@flash.net  Fwd: NYTimes.com Article: Suspended Rabbi Quit...   \n",
              "4    soblander@carrfut.com        daily charts and matrices as hot links 5/15   \n",
              "\n",
              "                                                body  label  \n",
              "0  Status John: I'm not really sure what happened...      0  \n",
              "1  re:summer inverses i suck-hope youve made more...      0  \n",
              "2  The WTI Bullet swap contracts Hi, Following th...      0  \n",
              "3  Fwd: NYTimes.com Article: Suspended Rabbi Quit...      0  \n",
              "4  daily charts and matrices as hot links 5/15 Th...      0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-10e1a253-c9ea-40d3-831d-2f6f2d34522f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sender</th>\n",
              "      <th>subject</th>\n",
              "      <th>body</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>msagel@home.com</td>\n",
              "      <td>Status</td>\n",
              "      <td>Status John: I'm not really sure what happened...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>slafontaine@globalp.com</td>\n",
              "      <td>re:summer inverses</td>\n",
              "      <td>re:summer inverses i suck-hope youve made more...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>iceoperations@intcx.com</td>\n",
              "      <td>The WTI Bullet swap contracts</td>\n",
              "      <td>The WTI Bullet swap contracts Hi, Following th...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>klarnold@flash.net</td>\n",
              "      <td>Fwd: NYTimes.com Article: Suspended Rabbi Quit...</td>\n",
              "      <td>Fwd: NYTimes.com Article: Suspended Rabbi Quit...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>soblander@carrfut.com</td>\n",
              "      <td>daily charts and matrices as hot links 5/15</td>\n",
              "      <td>daily charts and matrices as hot links 5/15 Th...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10e1a253-c9ea-40d3-831d-2f6f2d34522f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-10e1a253-c9ea-40d3-831d-2f6f2d34522f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-10e1a253-c9ea-40d3-831d-2f6f2d34522f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7752f95e-7b6a-4847-ab41-a42504a12109\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7752f95e-7b6a-4847-ab41-a42504a12109')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7752f95e-7b6a-4847-ab41-a42504a12109 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "enron_dataset"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nltk.download('stopwords')\n",
        "nltk.download('punkt')\n",
        "nltk.download('punkt_tab') # Download punkt_tab\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "def clean(text):\n",
        "    text = str(text).lower()\n",
        "    text = re.sub(r\"http\\S+|www\\S+|https\\S+\", '', text)\n",
        "    text = re.sub(r'\\d+', '', text)\n",
        "    text = text.translate(str.maketrans('', '', string.punctuation))\n",
        "    text = nltk.word_tokenize(text)\n",
        "    text = [word for word in text if word not in stop_words]\n",
        "    return text\n",
        "\n",
        "def add_url_counts(df: pd.DataFrame, body_series: pd.Series) -> pd.DataFrame:\n",
        "    url_pattern = r\"https?://[^\\s]+\"\n",
        "    df[\"url_number\"] = body_series.fillna(\"\").str.count(url_pattern)\n",
        "    return df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QdOTvbyMv1eb",
        "outputId": "13e55c18-acc1-461f-98c6-b9617a1ce050"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Package punkt_tab is already up-to-date!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df= pd.concat([ceas_dataset,enron_dataset],axis=0,ignore_index=True)"
      ],
      "metadata": {
        "id": "xev1m59Uo9yt"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = add_url_counts(df,df[\"body\"])"
      ],
      "metadata": {
        "id": "o7WacZ0rpJPy"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['body']=df['body'].apply(clean)\n",
        "df['subject']=df['subject'].apply(clean)\n",
        "df['sender'] = df['sender'].str.split('@').str[-1]\n",
        "df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "mqbDcbW7aaa0",
        "outputId": "988f8e57-d0ad-464a-9f5e-a2bf491e4de4"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      sender  \\\n",
              "0                 iworld.de>   \n",
              "1                 icable.ph>   \n",
              "2       universalnet.psi.br>   \n",
              "3                 pobox.com>   \n",
              "4       loanofficertool.com>   \n",
              "...                      ...   \n",
              "486566             enron.com   \n",
              "486567             enron.com   \n",
              "486568             enron.com   \n",
              "486569             enron.com   \n",
              "486570             enron.com   \n",
              "\n",
              "                                                  subject  \\\n",
              "0                                   [never, agree, loser]   \n",
              "1                              [befriend, jenna, jameson]   \n",
              "2                                    [cnncom, daily, top]   \n",
              "3       [svn, commit, r, spamassassintrunk, libmailspa...   \n",
              "4                            [specialpricespharmmoreinfo]   \n",
              "...                                                   ...   \n",
              "486566  [review, board, books, wrebecca, cbillbdavegmi...   \n",
              "486567             [audit, committee, materials, meeting]   \n",
              "486568                                    [credit, story]   \n",
              "486569                   [commodity, group, limit, issue]   \n",
              "486570                     [calley, hayes, deutsch, bank]   \n",
              "\n",
              "                                                     body  label  url_number  \n",
              "0       [buck, troubles, caused, small, dimension, soo...      1           1  \n",
              "1                   [upgrade, sex, pleasures, techniques]      1           1  \n",
              "2       [daily, top, cnncom, top, videos, stories, aug...      1          24  \n",
              "3       [would, anyone, object, removing, list, tld, b...      0         467  \n",
              "4                    [welcomefastshippingcustomersupport]      1           1  \n",
              "...                                                   ...    ...         ...  \n",
              "486566  [review, board, books, wrebecca, cbillbdavegmi...      0           0  \n",
              "486567  [audit, committee, materials, meeting, two, me...      0           0  \n",
              "486568  [credit, story, rickbilldavid, generally, mana...      0           0  \n",
              "486569  [commodity, group, limit, issue, addition, con...      0           0  \n",
              "486570  [calley, hayes, deutsch, bank, rick, calleys, ...      0           0  \n",
              "\n",
              "[486571 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fbc4c4e7-18c0-4ff4-9052-0b98fd1993c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sender</th>\n",
              "      <th>subject</th>\n",
              "      <th>body</th>\n",
              "      <th>label</th>\n",
              "      <th>url_number</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>iworld.de&gt;</td>\n",
              "      <td>[never, agree, loser]</td>\n",
              "      <td>[buck, troubles, caused, small, dimension, soo...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>icable.ph&gt;</td>\n",
              "      <td>[befriend, jenna, jameson]</td>\n",
              "      <td>[upgrade, sex, pleasures, techniques]</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>universalnet.psi.br&gt;</td>\n",
              "      <td>[cnncom, daily, top]</td>\n",
              "      <td>[daily, top, cnncom, top, videos, stories, aug...</td>\n",
              "      <td>1</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>pobox.com&gt;</td>\n",
              "      <td>[svn, commit, r, spamassassintrunk, libmailspa...</td>\n",
              "      <td>[would, anyone, object, removing, list, tld, b...</td>\n",
              "      <td>0</td>\n",
              "      <td>467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>loanofficertool.com&gt;</td>\n",
              "      <td>[specialpricespharmmoreinfo]</td>\n",
              "      <td>[welcomefastshippingcustomersupport]</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486566</th>\n",
              "      <td>enron.com</td>\n",
              "      <td>[review, board, books, wrebecca, cbillbdavegmi...</td>\n",
              "      <td>[review, board, books, wrebecca, cbillbdavegmi...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486567</th>\n",
              "      <td>enron.com</td>\n",
              "      <td>[audit, committee, materials, meeting]</td>\n",
              "      <td>[audit, committee, materials, meeting, two, me...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486568</th>\n",
              "      <td>enron.com</td>\n",
              "      <td>[credit, story]</td>\n",
              "      <td>[credit, story, rickbilldavid, generally, mana...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486569</th>\n",
              "      <td>enron.com</td>\n",
              "      <td>[commodity, group, limit, issue]</td>\n",
              "      <td>[commodity, group, limit, issue, addition, con...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486570</th>\n",
              "      <td>enron.com</td>\n",
              "      <td>[calley, hayes, deutsch, bank]</td>\n",
              "      <td>[calley, hayes, deutsch, bank, rick, calleys, ...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>486571 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fbc4c4e7-18c0-4ff4-9052-0b98fd1993c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fbc4c4e7-18c0-4ff4-9052-0b98fd1993c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fbc4c4e7-18c0-4ff4-9052-0b98fd1993c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c5ff8ed2-85c1-4906-abd9-a591f2b36601\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c5ff8ed2-85c1-4906-abd9-a591f2b36601')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c5ff8ed2-85c1-4906-abd9-a591f2b36601 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c9b9f2c1-f917-4058-9c7d-ced2db09814c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c9b9f2c1-f917-4058-9c7d-ced2db09814c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model LogisticRegression\n",
        "\n",
        "def to_text(x):\n",
        "    if isinstance(x, list):\n",
        "        return \" \".join(map(str, x))\n",
        "    if pd.isna(x):\n",
        "        return \"\"\n",
        "    return str(x)\n",
        "\n",
        "df[\"subject\"] = df[\"subject\"].apply(to_text)\n",
        "df[\"body\"]    = df[\"body\"].apply(to_text)\n",
        "\n",
        "vectorizer = TfidfVectorizer(max_features=5000, stop_words=\"english\")\n",
        "X_text = vectorizer.fit_transform(df[\"subject\"] + \" \" + df[\"body\"])\n",
        "url_num = df[[\"url_number\"]].fillna(0).astype(float).values\n",
        "X_num = sp.csr_matrix(url_num)\n",
        "\n",
        "X = sp.hstack([X_text, X_num], format=\"csr\")\n",
        "y = df[\"label\"].astype(int)\n",
        "\n",
        "mask = y.notna()\n",
        "X = X[mask.values]\n",
        "y = y[mask]\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42, stratify=y\n",
        ")\n",
        "\n",
        "\n",
        "model_default_treshold = LogisticRegression(max_iter=1000, class_weight=\"balanced\", solver=\"liblinear\")\n",
        "model_default_treshold.fit(X_train, y_train)\n",
        "\n",
        "# Ewaluacja\n",
        "y_pred = model_default_treshold.predict(X_test)\n",
        "print(classification_report(y_test, y_pred))\n",
        "print(confusion_matrix(y_test, y_pred))\n",
        "\n",
        "cm_default = confusion_matrix(y_test, y_pred, labels=[0, 1])\n",
        "\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.heatmap(cm_default,\n",
        "            annot=True, fmt=\"d\", cmap=\"Blues\",\n",
        "            xticklabels=['ham', 'spam'], yticklabels=['ham', 'spam'])\n",
        "\n",
        "plt.xlabel(\"Predykcja\")\n",
        "plt.ylabel(\"Rzeczywiste\")\n",
        "plt.title(\"Macierz pomyłek LogisticRegression próg=0.5\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 697
        },
        "id": "zhg-UdNwAjYf",
        "outputId": "247c7a4e-1c22-47d0-ccaa-7089c81ceb2d"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.98      0.99     92481\n",
            "           1       0.67      0.98      0.80      4834\n",
            "\n",
            "    accuracy                           0.98     97315\n",
            "   macro avg       0.84      0.98      0.89     97315\n",
            "weighted avg       0.98      0.98      0.98     97315\n",
            "\n",
            "[[90174  2307]\n",
            " [  115  4719]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model LogisticRegression\n",
        "\n",
        "model_07_treshold = LogisticRegression(max_iter=1000, class_weight=\"balanced\", solver=\"liblinear\")\n",
        "model_07_treshold.fit(X_train, y_train)\n",
        "\n",
        "y_prob = model_07_treshold.predict_proba(X_test)[:, 1]\n",
        "threshold = 0.7\n",
        "y_pred_custom = (y_prob > threshold).astype(int)\n",
        "\n",
        "# Ewaluacja\n",
        "print(classification_report(y_test, y_pred_custom))\n",
        "print(confusion_matrix(y_test, y_pred_custom))\n",
        "\n",
        "cm_07_treshold = confusion_matrix(y_test, y_pred, labels=[0, 1])\n",
        "\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.heatmap(cm_07_treshold,\n",
        "            annot=True, fmt=\"d\", cmap=\"YlGn\",\n",
        "            xticklabels=['ham', 'spam'], yticklabels=['ham', 'spam'])\n",
        "\n",
        "plt.xlabel(\"Predykcja\")\n",
        "plt.ylabel(\"Rzeczywiste\")\n",
        "plt.title(\"Macierz pomyłek LogisticRegression próg=0.7\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 697
        },
        "id": "qBRV3cv9TKNR",
        "outputId": "1679cbab-c4a2-4393-fde1-13af244b8d01"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.99      0.99     92481\n",
            "           1       0.81      0.93      0.86      4834\n",
            "\n",
            "    accuracy                           0.99     97315\n",
            "   macro avg       0.90      0.96      0.93     97315\n",
            "weighted avg       0.99      0.99      0.99     97315\n",
            "\n",
            "[[91403  1078]\n",
            " [  358  4476]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model LinearSVC\n",
        "\n",
        "model_svc = LinearSVC(class_weight=\"balanced\")\n",
        "model_svc.fit(X_train, y_train)\n",
        "\n",
        "# Ewaluacja\n",
        "y_pred = model_svc.predict(X_test)\n",
        "\n",
        "print(classification_report(y_test, y_pred))\n",
        "print(confusion_matrix(y_test, y_pred))\n",
        "\n",
        "cm_svc = confusion_matrix(y_test, y_pred)\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.heatmap(cm_svc, annot=True, fmt=\"d\", cmap=\"YlOrBr\",\n",
        "            xticklabels=['ham', 'spam'], yticklabels=['ham', 'spam'])\n",
        "plt.xlabel(\"Predykcja\")\n",
        "plt.ylabel(\"Rzeczywiste\")\n",
        "plt.title(\"Macierz pomyłek LinearSVC\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 733
        },
        "id": "AjhHB9szmt4G",
        "outputId": "50d17f0f-8b8b-4204-b587-477f988c8748"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/sklearn/svm/_base.py:1249: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.98      0.99     92481\n",
            "           1       0.69      0.97      0.81      4834\n",
            "\n",
            "    accuracy                           0.98     97315\n",
            "   macro avg       0.84      0.98      0.90     97315\n",
            "weighted avg       0.98      0.98      0.98     97315\n",
            "\n",
            "[[90355  2126]\n",
            " [  129  4705]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sIfdkhFEa2eO"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}